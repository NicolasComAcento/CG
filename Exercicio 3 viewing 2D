#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_POINTS 20

typedef struct Point {
    int x, y;
} Point;

Point subjectPolygon[MAX_POINTS];
Point clipPolygon[MAX_POINTS];
Point triangle[3];
int subjectSize = 0;
int clipSize = 4;
int triSize = 0;

void drawPolygon(Point polygon[], int size) {
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < size; i++)
        glVertex2i(polygon[i].x, polygon[i].y);
    glEnd();
}

Point getIntersection(Point a, Point b, Point p, Point q) {
    float A1 = b.y - a.y;
    float B1 = a.x - b.x;
    float C1 = A1 * (a.x) + B1 * (a.y);

    float A2 = q.y - p.y;
    float B2 = p.x - q.x;
    float C2 = A2 * (p.x) + B2 * (p.y);

    float determinant = A1 * B2 - A2 * B1;

    Point intersection = {(B2 * C1 - B1 * C2) / determinant, (A1 * C2 - A2 * C1) / determinant};
    return intersection;
}

void sutherlandHodgman(Point inPolygon[], int inSize, Point outPolygon[], int *outSize, Point clipPolygon[], int clipSize) {
    for (int i = 0; i < clipSize; i++) {
        Point p = clipPolygon[i];
        Point q = clipPolygon[(i + 1) % clipSize];

        Point tempPolygon[MAX_POINTS];
        int tempSize = 0;

        for (int j = 0; j < inSize; j++) {
            Point current = inPolygon[j];
            Point previous = inPolygon[(j + inSize - 1) % inSize];

            bool insideCurrent = (q.x - p.x) * (current.y - p.y) > (q.y - p.y) * (current.x - p.x);
            bool insidePrevious = (q.x - p.x) * (previous.y - p.y) > (q.y - p.y) * (previous.x - p.x);

            if (insideCurrent) {
                if (!insidePrevious)
                    tempPolygon[tempSize++] = getIntersection(p, q, previous, current);
                tempPolygon[tempSize++] = current;
            } else if (insidePrevious)
                tempPolygon[tempSize++] = getIntersection(p, q, previous, current);
        }

        for (int j = 0; j < tempSize; j++)
            inPolygon[j] = tempPolygon[j];

        inSize = tempSize;
    }

    for (int i = 0; i < inSize; i++)
        outPolygon[i] = inPolygon[i];

    *outSize = inSize;
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(0.0, 1.0, 0.0); // Fundo verde
    glBegin(GL_POLYGON);
    glVertex2i(0, 0);
    glVertex2i(500, 0);
    glVertex2i(500, 500);
    glVertex2i(0, 500);
    glEnd();

    glColor3f(0.0, 0.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2i(100, 100);
    glVertex2i(400, 100);
    glVertex2i(400, 400);
    glVertex2i(100, 400);
    glEnd();

    glColor3f(0.0, 0.0, 0.0);
    drawPolygon(clipPolygon, clipSize);
    glColor3f(1.0, 0.0, 0.0);
    glLineWidth(2.0);
    drawPolygon(subjectPolygon, subjectSize);
    glFlush();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && triSize < 3) {
        triangle[triSize].x = x;
        triangle[triSize].y = 500 - y;
        triSize++;
    }

    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN && triSize == 3) {
        for (int i = 0; i < 3; i++)
            subjectPolygon[i] = triangle[i];
        subjectSize = 3;

        sutherlandHodgman(subjectPolygon, subjectSize, subjectPolygon, &subjectSize, clipPolygon, clipSize);
        triSize = 0;
    }
    glutPostRedisplay();
}

int main(int argc, char **argv) {
    clipPolygon[0].x = 100; clipPolygon[0].y = 100;
    clipPolygon[1].x = 400; clipPolygon[1].y = 100;
    clipPolygon[2].x = 400; clipPolygon[2].y = 400;
    clipPolygon[3].x = 100; clipPolygon[3].y = 400;
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("");
    gluOrtho2D(0, 500, 0, 500);
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}
