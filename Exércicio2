#include <GL/glut.h>
#include <stdio.h>

#define INSIDE 0
#define LEFT 1
#define RIGHT 2
#define BOTTOM 4
#define TOP 8

int x_min = 50;
int x_max = 450;
int y_min = 50;
int y_max = 450;

int p1x, p1y, p2x, p2y;
int primeiroClique = 1;

int calculate_region_code(int x, int y) {
    int code = INSIDE;
    if (x < x_min)
        code |= LEFT;
    if (x > x_max)
        code |= RIGHT;
    if (y < y_min)
        code |= BOTTOM;
    if (y > y_max)
        code |= TOP;
    return code;
}

void cohen_sutherland(int x1, int y1, int x2, int y2) {
    int code1 = calculate_region_code(x1, y1);
    int code2 = calculate_region_code(x2, y2);
    int accept = 0;

    while (1) {
        if (!(code1 | code2)) {
            accept = 1;
            break;
        } else if (code1 & code2) {
            break;
        } else {
            int code_out = code1 ? code1 : code2;
            int x, y;

            if (code_out & TOP) {
                x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);
                y = y_max;
            } else if (code_out & BOTTOM) {
                x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);
                y = y_min;
            } else if (code_out & RIGHT) {
                y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);
                x = x_max;
            } else {
                y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);
                x = x_min;
            }

            if (code_out == code1) {
                x1 = x;
                y1 = y;
                code1 = calculate_region_code(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = calculate_region_code(x2, y2);
            }
        }
    }

    if (accept) {
        glColor3f(0.0, 0.0, 0.0); // Linha preta
        glLineWidth(3.0);
        glBegin(GL_LINES);
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
        glEnd();
        glLineWidth(1.0);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 1.0, 0.0); // Fundo verde
    glRecti(x_min, y_min, x_max, y_max);

    if (primeiroClique) {
        glColor3f(1.0, 1.0, 1.0); // Ponto branco
        glBegin(GL_POINTS);
        glVertex2i(p1x, p1y);
        glEnd();
    }

    cohen_sutherland(p1x, p1y, p2x, p2y);

    glFlush();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (primeiroClique) {
            p1x = x;
            p1y = glutGet(GLUT_WINDOW_HEIGHT) - y;
            primeiroClique = 0;
        } else {
            p2x = x;
            p2y = glutGet(GLUT_WINDOW_HEIGHT) - y;
            primeiroClique = 1;
        }
        glutPostRedisplay();
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("");
    glClearColor(0.0, 1.0, 0.0, 1.0); 
    p1x = p1y = p2x = p2y = -1;
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}
